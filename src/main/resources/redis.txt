redis

1.安装(如果是学习直接使用官网提供的在线redis)
	版本介绍
		版本号第二位如果是奇数，则为非稳定版本（例如2.7、2.9、3.1），如果是偶数，则为稳定版本（例如2.6、2.8、3.0、3.2）
		下载：redis-4.0.14.tar.gz
	单机
		1.解压
		tar -zxvf redis-4.0.14.tar.gz
		
		2.进入解压目录
		2.1编译
		cd src
		2.2指定安装目录(如果这里安装失败，说明没gcc和tcl,确保两个都安装上。)
		make PREFIX=/usr/redis install
		
		3.修改配置文件(从解压目录下复制一份到安装目录的etc下；redis.conf)
		vim redis.conf
		找到daemonize no修改成daemon yes	表示以后台模式启动
		
		4.进入安装目录启动
		bin/redis-server etc/redis.conf
		
		5.连接
		./redis-cli -h 192.168.66.2 -p 7000
		
	集群
		1.先按照单机的操作，有一份redis
		
		2.至少3个master；slave >= master比较好
		
		3.进入安装目录
		mkdir cluster
		cd cluster
		mkdir 7000 7001 7002
		cp ../etc/redis.conf 7000/
		cp ../etc/redis.conf 7001/
		cp ../etc/redis.conf 7002/
		
		4.修改配置文件
		port  7000                               # 端口7000,7002,7003        
		bind  192.168.66.2                       # 默认ip为127.0.0.1 需要改为其他节点机器可访问的ip 否则创建集群时无法访问对应的端口，无法创建集群
		daemonize    yes                         # redis后台运行
		pidfile  /var/run/redis_7000.pid         # pidfile文件对应7000,7001,7002
		cluster-enabled  yes                     # 开启集群  把注释#去掉
		cluster-config-file  nodes_7000.conf     # 集群的配置  配置文件首次启动自动生成 7000,7001,7002
		cluster-node-timeout  15000              # 请求超时  默认15秒，可自行设置
		appendonly  yes                          # aof日志开启  有需要就开启，它会每次写操作都记录一条日志
		appendfilename "appendonly.aof"　        # aof文件路径
		
		5.复制redis到其他节点
		scp -r root@192.168.66.2:/usr/local/lib/redis /usr/local/lib
		
		6.启动
		bin/redis-server cluster/7000/redis.conf
		bin/redis-server cluster/7001/redis.conf
		bin/redis-server cluster/7002/redis.conf
		
		#slave
		bin/redis-server cluster/7003/redis.conf
		bin/redis-server cluster/7004/redis.conf
		bin/redis-server cluster/7005/redis.conf
		
		7.连接
		./redis-cli -h 192.168.66.2 -c -p 7000  #进入集群

2.数据类型
	介绍：
	redis内部内存管理中是如何描述这些数据类型的？
		redis核心对象(redisObject)
		{
			数据类型(type)
			编码方式(encoding)：raw、int、ht、zipmap、linkedlist、ziplist、intset
			数据指针(ptr)
			虚拟内存(vm)
			其他信息
		}
		首先redis内部使用一个redisObject对象来表示所有的key和value，redisObject最主要的信息如上面的结构，
		type代表一个value对象具体是何种数据类型。
		encoding是不同数据类型再redis内部的存储方式，比如type=string代表value存储的是一个普通字符串；那么对应的encoding可以是raw或者int
		如果是int则代表实际redis内部是按数值类型存储和表示这个字符串的，当然前提是这个字符串本身可以用数值表示，比如："123" "456"这样的。
		
		vm字段，只有打开redis的虚拟内存功能，此字段才会真正的分配内存。
		由redisObject结构可以发现保存key/value数据是比较浪费内存的，redis是为了方便管理，为不同类型提供一个统一的管理接口。
	
	1.string(字符串)
		一个key对应一个value，最大能存储512MB
		set key value
	
	2.list(列表)
		字符串的列表，按照插入顺序排序，添加一个元素到列表的头部(左边)，或者尾部(右边)。
		lpush key value
		
	3.set(集合)
		string类型的无序集合，通过hashTable实现的，可以实现交集、并集、差集等等。
		sadd key value
		
	4.zset(有序集合)
		按照指定的优先级(score)进行排序。
		zadd key score value
	
	5.hash(哈希)
		相当于表，key相当于表名；field相当于列；value是值

3.shell命令
4.java-api

5.数据结构(SDS字符)
	RDB文件结构(dump.rdb，常量全部大写)
	REDIS	db_version	databases	EOF	check_sum
	
	介绍
	REDIS：RDB文件的开头，是长度为5个字节；说明一个字母一个字节；采用16进制打开(52 45 44 49 53)
	db_version：长度4字节，记录RDB文件的版本号，比如0008，表示RDB文件版本为8版。(30 30 30 38)
	
	AUX元属性：(FA表示一个空格)
	// redis-ver属性(redis版本);4.0.14
	FA 9 r e d i s - v e r 6 4 . 0 . 1 4(FA 09 72 65 64 69 73 2D 76 65 72 06 34 2E 30 2E 31 34)
	// redis-bits属性(位架构);64
	FA 10 r e d i s - b i t s  64(FA 0A 72 65 64 69 73 2D 62 69 74 73 C0 40)
	// ctime属性(rdb创建时间);2021/03/02/
	FA  c t i m e  1606277289 (FA 05 63 74 69 6D 65 时间)
	// user-mem属性(dump当前占用系统内存多少byte);618272
	FA 08 u s e d - m e m 
	
	// 数据库编号0
	FE 00
	// 当前库dbsize(共1个key, 0个由过期时间)
	FB 01 00
	// 类型  key value

6.读写流程
	


7.数据存储
	持久化RDB/AOP;通过配置文件进行配置,默认RDB
	
8.集群模式
	1.主从复制模式
		防止单点故障
		复制流程：
			主服务器					从服务器
					<--------------Sync请求
			创建快照、
			缓冲快照
			生成期间
			的写命令
					--------快照------->加载、解析快照
			缓冲快照
			生成期间
			的写命令
					-------缓冲--------->载入缓冲
					---------同步增量--->loop
			
			1.从数据库启动成功后，连接主数据库，发送 SYNC 命令；
			2.主数据库接收到 SYNC 命令后，开始执行 BGSAVE 命令生成 RDB 文件并使用缓冲区记录此后执行的所有写命令；
			3.主数据库 BGSAVE 执行完后，向所有从数据库发送快照文件，并在发送期间继续记录被执行的写命令；
			4.从数据库收到快照文件后丢弃所有旧数据，载入收到的快照；
			5.主数据库快照发送完毕后开始向从数据库发送缓冲区中的写命令；
			6.从数据库完成对快照的载入，开始接收命令请求，并执行来自主数据库缓冲区的写命令；（从数据库初始化完成）
			7.主数据库每执行一个写命令就会向从数据库发送相同的写命令，从数据库接收并执行收到的写命令（从数据库初始化完成后的操作）
			8.出现断开重连后，2.8之后的版本会将断线期间的命令传给重数据库，增量复制。
			9.主从刚刚连接的时候，进行全量同步；全同步结束后，进行增量同步。当然，如果有需要，slave 在任何时候都可以发起全量同步。Redis 的策略是，无论如何，首先会尝试进行增量同步，如不成功，要求从机进行全量同步。
		
		优缺点：
			1.支持主从复制，主机会自动将数据同步到从机，可以进行读写分离；
			2.为了分载 Master 的读操作压力，Slave 服务器可以为客户端提供只读操作的服务，写服务仍然必须由Master来完成；
			3.Slave 同样可以接受其它 Slaves 的连接和同步请求，这样可以有效的分载 Master 的同步压力；
			4.Master Server 是以非阻塞的方式为 Slaves 提供服务。所以在 Master-Slave 同步期间，客户端仍然可以提交查询或修改请求；
			5.Slave Server 同样是以非阻塞的方式完成数据同步。在同步期间，如果有客户端提交查询请求，Redis则返回同步之前的数据；
			
			1.Redis不具备自动容错和恢复功能，主机从机的宕机都会导致前端部分读写请求失败，需要等待机器重启或者手动切换前端的IP才能恢复（也就是要人工介入）；
			2.主机宕机，宕机前有部分数据未能及时同步到从机，切换IP后还会引入数据不一致的问题，降低了系统的可用性；
			3.如果多个 Slave 断线了，需要重启的时候，尽量不要在同一时间段进行重启。因为只要 Slave 启动，就会发送sync 请求和主机全量同步，当多个 Slave 重启的时候，可能会导致 Master IO 剧增从而宕机。
			4.Redis 较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂；
			
	2.Sentinel（哨兵）模式
		故障切换过程
			假设主服务器宕机，哨兵1先检测到这个结果，系统并不会马上进行 failover 过程，仅仅是哨兵1主观的认为主服务器不可用，这个现象成为主观下线。
			当后面的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行 failover 操作。
			切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为客观下线。这样对于客户端而言，一切都是透明的。
		
		哨兵模式的工作方式
			1.每个Sentinel（哨兵）进程以每秒钟一次的频率向整个集群中的 Master 主服务器，Slave 从服务器以及其他Sentinel（哨兵）进程发送一个 PING 命令。
			2.如果一个实例（instance）距离最后一次有效回复 PING 命令的时间超过 down-after-milliseconds 选项所指定的值， 则这个实例会被 Sentinel（哨兵）进程标记为主观下线（SDOWN）
			3.如果一个 Master 主服务器被标记为主观下线（SDOWN），则正在监视这个 Master 主服务器的所有 Sentinel（哨兵）进程要以每秒一次的频率确认 Master 主服务器的确进入了主观下线状态
			4.当有足够数量的 Sentinel（哨兵）进程（大于等于配置文件指定的值）在指定的时间范围内确认 Master 主服务器进入了主观下线状态（SDOWN）， 则 Master 主服务器会被标记为客观下线（ODOWN）
			5.在一般情况下， 每个 Sentinel（哨兵）进程会以每 10 秒一次的频率向集群中的所有 Master 主服务器、Slave 从服务器发送 INFO 命令。
			6.当 Master 主服务器被 Sentinel（哨兵）进程标记为客观下线（ODOWN）时，Sentinel（哨兵）进程向下线的 Master 主服务器的所有 Slave 从服务器发送 INFO 命令的频率会从 10 秒一次改为每秒一次。
			7.若没有足够数量的 Sentinel（哨兵）进程同意 Master主服务器下线， Master 主服务器的客观下线状态就会被移除。若 Master 主服务器重新向 Sentinel（哨兵）进程发送 PING 命令返回有效回复，Master主服务器的主观下线状态就会被移除。
			
		优缺点
			1.哨兵模式是基于主从模式的，所有主从的优点，哨兵模式都具有。
			2.主从可以自动切换，系统更健壮，可用性更高(可以看作自动版的主从复制)。
			
			1.Redis较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。
		
	3.Cluster 模式
		Redis 的哨兵模式基本已经可以实现高可用，读写分离 ，但是在这种模式下每台 Redis 服务器都存储相同的数据，很浪费内存，所以在 redis3.0上加入了 Cluster 集群模式，实现了 Redis 的分布式存储，也就是说每台 Redis 节点上存储不同的内容。
		
		集群的数据分片
			1.Redis 集群没有使用一致性 hash，而是引入了哈希槽【hash slot】的概念。
			2.Redis 集群有16384 个哈希槽，每个 key 通过 CRC16 校验后对 16384 取模来决定放置哪个槽。集群的每个节点负责一部分hash槽，举个例子，比如当前集群有3个节点，那么：
				节点 A 包含 0 到 5460 号哈希槽
				节点 B 包含 5461 到 10922 号哈希槽
				节点 C 包含 10923 到 16383 号哈希槽
			3.这种结构很容易添加或者删除节点。比如如果我想新添加个节点 D ， 我需要从节点 A， B， C 中得部分槽到 D 上。如果我想移除节点 A ，需要将 A 中的槽移到 B 和 C 节点上，
			然后将没有任何槽的 A 节点从集群中移除即可。由于从一个节点将哈希槽移动到另一个节点并不会停止服务，所以无论添加删除或者改变某个节点的哈希槽的数量都不会造成集群不可用的状态。
			4.在 Redis 的每一个节点上，都有这么两个东西，一个是插槽（slot），它的的取值范围是：0-16383。还有一个就是 cluster，可以理解为是一个集群管理的插件。当我们的存取的 Key到达的时候，Redis 会根据 CRC16 的算法得出一个结果，然后把结果对 16384 求余数，这样每个 key 都会对应一个编号在 0-16383 之间的哈希槽，通过这个值，去找到对应的插槽所对应的节点，然后直接自动跳转到这个对应的节点上进行存取操作。
		
		Redis 集群的主从复制模型
	

9.不同集群模式对比

10.主从同步流程和问题